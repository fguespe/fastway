function copy_to_clipboard(idobj) {
    jQuery('#'+idobj).show();
    var copyText = document.getElementById(idobj);

    /* Select the text field */
    copyText.select();

    /* Copy the text inside the text field */
    document.execCommand("copy");

    /* Alert the copied text */
    alert("URL del producto copiada!");
    jQuery('#'+idobj).hide();
}


// auxiliary code to create triggers for the add and remove class for later use
(function($){
$.each(["addClass","removeClass"],function(i,methodname){
    var oldmethod = $.fn[methodname];
    $.fn[methodname] = function(){
          oldmethod.apply( this, arguments );
          this.trigger(methodname+"change");
          return this;
    }
});
})(jQuery);

// main function for the infinite loop
function vc_custominfiniteloop_init(vc_cil_element_id){

  var vc_element = '#' + vc_cil_element_id; // because we're using this more than once let's create a variable for it
  window.maxItens = jQuery(vc_element).data('per-view'); // max visible items defined
  window.addedItens = 0; // auxiliary counter for added itens to the end 
          
  // go to slides and duplicate them to the end to fill space
  jQuery(vc_element).find('.vc_carousel-slideline-inner').find('.vc_item').each(function(){
    // we only need to duplicate the first visible images
    if (window.addedItens < window.maxItens) {
      if (window.addedItens == 0 ) {
        // the fisrt added slide will need a trigger so we know it ended and make it "restart" without animation
        jQuery(this).clone().addClass('vc_custominfiniteloop_restart').removeClass('vc_active').appendTo(jQuery(this).parent());            
      } else {
        jQuery(this).clone().removeClass('vc_active').appendTo(jQuery(this).parent());         
      }
      window.addedItens++;
    }
  });

  // add the trigger so we know when to "restart" the animation without the user knowing about it
  jQuery('.vc_custominfiniteloop_restart').bind('addClasschange', null, function(){
    
    // navigate to the carousel element , I know, its ugly ...
    var vc_carousel = jQuery(this).parent().parent().parent().parent();

    // first we temporarily change the animation speed to zero
    jQuery(vc_carousel).data('vc.carousel').transition_speed = 0;

    // make the slider go to the first slide without animation and because the fist set of images shown
    // are the same that are being shown now the slider is now "restarted" without that being visible 
    jQuery(vc_carousel).data('vc.carousel').to(0);

    // allow the carousel to go to the first image and restore the original speed 
    setTimeout("vc_cil_restore_transition_speed('"+jQuery(vc_carousel).prop('id')+"')",100);
  });

}

// restore original speed setting of vc_carousel
function vc_cil_restore_transition_speed(element_id){
// after inspecting the original source code the value of 600 is defined there so we put back the original here
jQuery('#' + element_id).data('vc.carousel').transition_speed = 600; 
}

// init     
jQuery(document).ready(function(){    
  // find all vc_carousel with the defined class and turn them into infine loop
  jQuery('.vc_custominfiniteloop').find('div[data-ride="vc_carousel"]').each(function(){
    // allow time for the slider to be built on the page
    // because the slider is "long" we can wait a bit before adding images and events needed  
    var vc_cil_element = jQuery(this).prop("id");
    setTimeout("vc_custominfiniteloop_init('"+vc_cil_element+"')",2000);      
  });    
});


function debounce(func, wait, immediate) {
  var timeout;
  return function() {
    var context = this, args = arguments;
    var later = function() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
};
function applySearch(tipo){

  var jQuerysearchWrap = jQuery('.fw_search_form.'+tipo),
      jQuerysearchField = jQuery('.fw_search_form.'+tipo+' .search-field'),
      jQueryloadingIcon = jQuery('.fw_search_form.'+tipo+' .loading'),
      termExists = "";

    // Add results container and disable autocomplete on search field
  jQuerysearchWrap.append('<div class="results"></div>');
  var jQuerysearchResults = jQuery('.fw_search_form.'+tipo+' .results');
  jQuerysearchField.attr('autocomplete', 'off');
  
  // Perform search on keyup in search field, hide/show loading icon
  jQuerysearchField.keyup( function() {
    jQueryloadingIcon.css('display', 'block');
    
    // If the search field is not empty, perform the search function
    if( jQuerysearchField.val() !== "" ) {
      termExists = true;
      doSearch();
    } else {
      termExists = false;
      jQuerysearchResults.empty();
      jQueryloadingIcon.css('display', 'none');
    }
  });
  
  // Make search Ajax request every 200 milliseconds, output results
  var doSearch = debounce(function() {
    var query = jQuerysearchField.val();
    jQuery.ajax({
      type: 'POST',
      url: ajaxurl, // ajaxurl comes from the localize_script we added to functions.php
      data: {
        action: 'ajax_search',
        query: query,
      },
      success: function(result) {
        if ( termExists ) {
          // `result` here is what we've specified in ajax-search.php
          jQuerysearchResults.html('<div class="results-list">' + result + '</div>');
        }
      },
      complete: function() {
        // Whether or not results are returned, hide the loading icon once the request is complete
        jQueryloadingIcon.css('display', 'none');
      }
    });
  }, 200);
}


function getUpdatedPriceCart(){
  jQuery.get(ajaxurl,
  {'action': 'cart_get_subtotal'}, 
  function (totals) { 
      jQuery('#total').text(totals.subtotal)
  });
}
function updatecant(index,sum){

  let actual=parseInt(jQuery('#qty_'+index).val())
  let precio=parseInt(jQuery('#lineprice_'+index).data('price'))
  let total=parseInt(actual+sum)
  let lineprice=parseInt(total)*parseInt(precio)
  let format='$' + parseFloat(lineprice, 10).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").toString()
  
  jQuery('#qty_'+index).val(total)
  jQuery('#qtyx_'+index).text(total)
  jQuery('#lineprice_'+index).text(format)
  this.getUpdatedPriceCart();
}
function toggleloading(index){
  jQuery('#loadingshow_'+index).toggle();jQuery('#loadinghide_'+index).toggle();
  jQuery('#loadingshow_totals').toggle();jQuery('#loadinghide_totals').toggle();
}

function remove(index,cart_item_key){
  toggleloading(index)
  jQuery.get(ajaxurl,
  {'action': 'cart_remove_item',cart_item_key:cart_item_key}, 
  function (msg) { 
      toggleloading(index)
  });
}


jQuery(document).ready( function(jQuery) {

  /*FAQ*/
  jQuery('.pafa-accordion-open').on('click',function(e){
    jQuery(this).parent().find('.pafa-accordion-a').slideToggle()
  });

  setTimeout( function() {
    jQuery('.fw_variations select').trigger('check_variations');
  }, 100 );
  
	applySearch("desktop");
	applySearch("mobile");
	jQuery(document).on('click', '#main-menu .dropdown-menu', function (e) {
		//e.preventDefault();
	  	e.stopPropagation();
	});
	jQuery(document).on('click', '#main-menu-mobile .dropdown-menu', function (e) {
		//e.preventDefault();
	  	e.stopPropagation();
	});
  jQuery(document).on('click', '#page-wrapper', function (e) {
    jQuery('.offcanvas-collapse.open').toggleClass('open');
    jQuery('.fw_menu_mobile').removeClass('opened');
    jQuery('.mobile-menu-overlay').removeClass('opened');
  });
  jQuery('[data-toggle="offcanvas"]').on('click', function () {
    jQuery('.offcanvas-collapse').toggleClass('open');
  });
  jQuery('.btn-bars-mobile').click(function(){
      jQuery('.fw_menu_mobile').addClass('opened');
      jQuery('.mobile-menu-overlay').addClass('opened');
  });    

  jQuery('.mobile-menu-overlay').click(function(){
    jQuery('.fw_menu_mobile').removeClass('opened');
    jQuery('.mobile-menu-overlay').removeClass('opened');
    jQuery('.sidebar-mobile-cats').removeClass('opened');
    });      
   
jQuery('.btn-bars-mobile-cats').click(function(){

      jQuery('.sidebar-mobile-cats').addClass('opened');
      jQuery('.mobile-menu-overlay').addClass('opened');
  });   
  //var hoverTimeout;
//Megamenu/Desktop
  jQuery('#fw_menu li').hover(function() {
      jQuery(this).find('.dropdown-menu.first').show();
  });
  jQuery('#fw_menu .dropdown-submenu').hover(function() {
    jQuery(this).find('.dropdown-menu.second').show();
  });
  jQuery('#fw_menu li').mouseleave(function() {
    jQuery(this).find('.dropdown-menu.first').hide();
  });
  jQuery('#fw_menu .dropdown-submenu').mouseleave(function() {
    jQuery(this).find('.dropdown-menu.second').hide();
  });
  jQuery('.bottom #fw_menu li.dropdown').hover(function() {
    jQuery('.submenu-overlay').addClass('active');

  });
  jQuery('.bottom #fw_menu li.dropdown').mouseleave(function() {
    jQuery('.submenu-overlay').removeClass('active');

  });

  //Dropdown mpbile
  jQuery('#main-menu-mobile li').click(function() {

    jQuery('.dropdown-menu').hide();
    jQuery(this).find('.dropdown-menu').show();

});
});

jQuery(document).click(function(e) {
  if ((e.target != jQuery('.offcanvas')[0]) && (e.target != jQuery('.offcanvas-toggle')[0]) && (jQuery('body').hasClass('offcanvas-expanded'))) {
    var li_tags = jQuery(jQuery('.offcanvas')[0]).find('li');
    var a_tags = jQuery(jQuery('.offcanvas')[0]).find('a');
    for (var i = 0; i < li_tags.length; i++) {
      if (e.target == li_tags[i] || e.target == a_tags[i]) {
        return;
      }
    }
    jQuery('.offcanvas-collapse').toggleClass('open');
  }
  
});

if (jQuery('#back-to-top').length) {
    var scrollTrigger = 100, // px
        backToTop = function () {
            var scrollTop = jQuery(window).scrollTop();
            if (scrollTop > scrollTrigger) {
                jQuery('#back-to-top').addClass('show');
            } else {
                jQuery('#back-to-top').removeClass('show');
            }
        };
    backToTop();
    jQuery(window).on('scroll', function () {
        backToTop();
    });
    jQuery('#back-to-top').on('click', function (e) {
        e.preventDefault();
        jQuery('html,body').animate({
            scrollTop: 0
        }, 700);
    });
}


/*SINGLE PRODUCTS
if (jQuery('form.variations_form').length !== 0) {
  var form = jQuery('form.variations_form');
  var variable_product_price = '';
  setInterval(function() {
      
      if (jQuery('.single_variation_wrap span.price').length !== 0) {
        if (jQuery('.single_variation_wrap span.price').text() !== variable_product_price[0]) {
              variable_product_price = jQuery('.woocommerce-variation-price span.price .amount');
              let preciovariacion=variable_product_price.clone().children().remove().end().text()
              let suffix=jQuery('#fwprice .precio .suffix').text()
              jQuery('#fwprice .precio').html('<span class="fw_price price1"><span class="precio">$'+preciovariacion+'<span class="suffix">'+suffix+'</span></span></span>');
        }
      }
  }, 500);
}*/

jQuery(window).scroll(function(){
  var jQueryaltoScroll = jQuery('.fw_single_product').height() - 350;
  if (jQuery(this).scrollTop() > jQueryaltoScroll) {
      jQuery('.fw_single_product .summary').toggleClass('fixed');
  }            
});    


(function($){

	'use strict'

	$(function(){

		$('#wscp-button').on('click',function(){
			if( $('#wscp-postcode').val().length < 3 ) {

				$('#wscp-postcode').focus();

				return;
			}

			$('#wscp-response').html('');

			var detected = detect_product_variation();
			if( !detected ) {

				$('#wscp-response').fadeOut('fast',function(){

					$(this).html("<div class='woocommerce-message woocommerce-error'>Seleccionar una de las opciones variables.</div>").fadeIn('fast');

				});
					
			
			} else {

				$('#wscp-button').addClass('loading');

				$.ajax({

					type : 'post',
					url  : wscp_admin_url + '?action=wscp_ajax_postcode',
					data : {

						product  : detected,
						qty      : ( $('.quantity input.qty').length ? $('.quantity input.qty').val() : 1 ),
						postcode : $('#wscp-postcode').val(),
						nonce    : $('#wscp-nonce').val()

					},
					success: function(response){


						$('#wscp-response').fadeOut('fast',function(){

							$(this).html(response).fadeIn('fast');
							$('#wscp-button').removeClass('loading');

						});
					}
				});
			}

		});

		$('form.cart, #wscp-postcode').on('keypress', function(e) {
		 	
		 	var keyCode = e.keyCode || e.which;
			
			if (keyCode === 13) { 

				$('#wscp-button').click();
		    	e.preventDefault();
		    	return false;
		  	}
		});

	});


})(jQuery);

	
function detect_product_variation() {
	return jQuery('.fw_add_to_cart_button').data("product_id")
}


jQuery("#woocommerce-wrapper").click(function() {
 console.log('jaja')
});
/*HANS BIOMED QUANITITY*/

function wcqib_refresh_quantity_increments() {
  jQuery(".fw_variations_table  div.quantity:not(.buttons_added), .fw_variations_table td.quantity:not(.buttons_added)").each(function(a, b) {
      var c = jQuery(b);
      c.addClass("buttons_added"), c.children().first().before('<input type="button" value="-" class="minus" />'), c.children().last().after('<input type="button" value="+" class="plus" />')
  })
}

String.prototype.getDecimals || (String.prototype.getDecimals = function() {
  var a = this,
      b = ("" + a).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  return b ? Math.max(0, (b[1] ? b[1].length : 0) - (b[2] ? +b[2] : 0)) : 0
}), jQuery(document).ready(function() {
  wcqib_refresh_quantity_increments()
}), jQuery(document).on("updated_wc_div", function() {
  wcqib_refresh_quantity_increments()
}), jQuery(document).on("click", ".plus, .minus", function() {
  var a = jQuery(this).closest(".quantity").find(".qty"),
      b = parseFloat(a.val()),
      c = parseFloat(a.attr("max")),
      d = parseFloat(a.attr("min")),
      e = a.attr("step");
  b && "" !== b && "NaN" !== b || (b = 0), "" !== c && "NaN" !== c || (c = ""), "" !== d && "NaN" !== d || (d = 0), "any" !== e && "" !== e && void 0 !== e && "NaN" !== parseFloat(e) || (e = 1), jQuery(this).is(".plus") ? c && b >= c ? a.val(c) : a.val((b + parseFloat(e)).toFixed(e.getDecimals())) : d && b <= d ? a.val(d) : b > 0 && a.val((b - parseFloat(e)).toFixed(e.getDecimals())), a.trigger("change")
});

